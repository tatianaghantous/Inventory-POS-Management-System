// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMDataLayer.Models;

#nullable disable

namespace SM.DataLayer.Migrations
{
    [DbContext(typeof(ClothingStoreContext))]
    partial class ClothingStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("SMDataLayer.Models.Account", b =>
                {
                    b.Property<long>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BackupNumber")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<long?>("HasPermission")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastConnection")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SMDataLayer.Models.Branch", b =>
                {
                    b.Property<long>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("BranchName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("TEXT");

                    b.HasKey("BranchId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("SMDataLayer.Models.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<long>("DisplayInPos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DisplayInPOS");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.HasIndex(new[] { "BranchId" }, "IX_Categories_BranchID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SMDataLayer.Models.Currency", b =>
                {
                    b.Property<long>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CurrencyID");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("TEXT");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("SMDataLayer.Models.Customer", b =>
                {
                    b.Property<long>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<long>("DepartmentWorker")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FamilyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.HasIndex(new[] { "BranchId" }, "IX_Customers_BranchID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SMDataLayer.Models.DailySale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double?>("EndBalance")
                        .HasColumnType("REAL");

                    b.Property<double?>("Profit")
                        .HasColumnType("REAL");

                    b.Property<double?>("StartingBalance")
                        .HasColumnType("REAL");

                    b.Property<double?>("TotalSales")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchId" }, "IX_DailySales_BranchID");

                    b.ToTable("DailySales");
                });

            modelBuilder.Entity("SMDataLayer.Models.Inventory", b =>
                {
                    b.Property<long>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("InventoryID");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<string>("LastRestockedDate")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Price")
                        .HasColumnType("REAL");

                    b.Property<long?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("QuantityInStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReorderThreshold")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.HasKey("InventoryId");

                    b.HasIndex(new[] { "BranchId" }, "IX_Inventory_BranchID");

                    b.HasIndex(new[] { "ProductId" }, "IX_Inventory_ProductId");

                    b.HasIndex(new[] { "SupplierId" }, "IX_Inventory_SupplierId");

                    b.ToTable("Inventory", (string)null);
                });

            modelBuilder.Entity("SMDataLayer.Models.Notification", b =>
                {
                    b.Property<long>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("NotificationID");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<long>("NotificationSeen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NotificationText")
                        .HasColumnType("TEXT");

                    b.HasKey("NotificationId");

                    b.HasIndex(new[] { "BranchId" }, "IX_Notifications_BranchID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SMDataLayer.Models.Option", b =>
                {
                    b.Property<long>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("option_id");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("option_name");

                    b.HasKey("OptionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("SMDataLayer.Models.OrderItem", b =>
                {
                    b.Property<long>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DiscountedFromShopify")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("InitialCost")
                        .HasColumnType("REAL");

                    b.Property<long>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("1");

                    b.Property<long?>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("PriceUsd")
                        .HasColumnType("REAL");

                    b.Property<long?>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("SalePrice")
                        .HasColumnType("REAL");

                    b.Property<double?>("TotalPriceAfterDiscount")
                        .HasColumnType("REAL");

                    b.Property<double?>("UnitPriceAfterDiscount")
                        .HasColumnType("REAL");

                    b.HasKey("OrderItemId");

                    b.HasIndex(new[] { "ItemId" }, "IX_OrderItem_ItemId");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderItem_OrderId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("SMDataLayer.Models.OrderSummary", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<long?>("BuyerId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("GainInLbp")
                        .HasColumnType("REAL")
                        .HasColumnName("GainInLBP");

                    b.Property<double?>("GainInUsd")
                        .HasColumnType("REAL")
                        .HasColumnName("GainInUSD");

                    b.Property<long>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("isPaid")
                        .HasDefaultValueSql("1");

                    b.Property<string>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderDateTime")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SellerId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("TotalAfterDiscountInUsd")
                        .HasColumnType("REAL")
                        .HasColumnName("TotalAfterDiscountInUSD");

                    b.Property<double?>("TotalInLbp")
                        .HasColumnType("REAL")
                        .HasColumnName("TotalInLBP");

                    b.Property<double?>("TotalInUsd")
                        .HasColumnType("REAL")
                        .HasColumnName("TotalInUSD");

                    b.HasKey("OrderId");

                    b.HasIndex(new[] { "BranchId" }, "IX_OrderSummary_BranchID");

                    b.HasIndex(new[] { "BuyerId" }, "IX_OrderSummary_BuyerId");

                    b.HasIndex(new[] { "SellerId" }, "IX_OrderSummary_SellerId");

                    b.ToTable("OrderSummary", (string)null);
                });

            modelBuilder.Entity("SMDataLayer.Models.PaymentMethod", b =>
                {
                    b.Property<long>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethodName")
                        .HasColumnType("TEXT");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex(new[] { "BranchId" }, "IX_PaymentMethods_BranchID");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("SMDataLayer.Models.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarcodeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<double?>("InitialPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double?>("SellingPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("Size")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId");

                    b.HasIndex(new[] { "BarcodeId" }, "IX_Products_BarcodeId")
                        .IsUnique();

                    b.HasIndex(new[] { "BranchId" }, "IX_Products_BranchID");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Products_CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SMDataLayer.Models.Promotion", b =>
                {
                    b.Property<long>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discount")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PromotionName")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("PromotionId");

                    b.HasIndex(new[] { "BranchId" }, "IX_Promotions_BranchID");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("SMDataLayer.Models.Purchase", b =>
                {
                    b.Property<long>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PurchaseID");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<string>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CurrencyID");

                    b.Property<string>("ExpectedDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<double?>("InitialPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValueSql("0.00");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductID");

                    b.Property<string>("PurchaseDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PurchaseOrderNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PurchaseStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("1");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SupplierID");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("REAL");

                    b.Property<double?>("TotalPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValueSql("0.00");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("PurchaseId");

                    b.HasIndex(new[] { "BranchId" }, "IX_Purchases_BranchID");

                    b.HasIndex(new[] { "CurrencyId" }, "IX_Purchases_CurrencyID");

                    b.HasIndex(new[] { "ProductId" }, "IX_Purchases_ProductID");

                    b.HasIndex(new[] { "SupplierId" }, "IX_Purchases_SupplierID");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("SMDataLayer.Models.Return", b =>
                {
                    b.Property<long>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long?>("NewProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("NewProductID");

                    b.Property<double?>("PaidDifference")
                        .HasColumnType("REAL");

                    b.Property<long?>("QuantityReturned")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Refund")
                        .HasColumnType("REAL");

                    b.Property<string>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReturnReason")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReturnedProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReturnedProductID");

                    b.HasKey("ReturnId");

                    b.HasIndex(new[] { "BranchId" }, "IX_Returns_BranchID");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Returns_CustomerId");

                    b.HasIndex(new[] { "NewProductId" }, "IX_Returns_NewProductID");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("SMDataLayer.Models.ReviewsRating", b =>
                {
                    b.Property<long>("ReviewRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReviewRatingID");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CustomerID");

                    b.Property<long?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductID");

                    b.Property<long?>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewText")
                        .HasColumnType("TEXT");

                    b.HasKey("ReviewRatingId");

                    b.HasIndex(new[] { "BranchId" }, "IX_ReviewsRatings_BranchID");

                    b.HasIndex(new[] { "CustomerId" }, "IX_ReviewsRatings_CustomerID");

                    b.HasIndex(new[] { "ProductId" }, "IX_ReviewsRatings_ProductID");

                    b.ToTable("ReviewsRatings");
                });

            modelBuilder.Entity("SMDataLayer.Models.Service", b =>
                {
                    b.Property<long>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("IsPaid")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ServiceCost")
                        .HasColumnType("REAL");

                    b.Property<string>("ServiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceDuration")
                        .HasColumnType("TEXT");

                    b.Property<double?>("ServiceProfit")
                        .HasColumnType("REAL");

                    b.Property<double>("ServiceSellingPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("ServiceType")
                        .HasColumnType("TEXT");

                    b.HasKey("ServiceId");

                    b.HasIndex(new[] { "BranchId" }, "IX_Services_BranchID");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Services_CustomerID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SMDataLayer.Models.Setting", b =>
                {
                    b.Property<string>("SettingKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingValue")
                        .HasColumnType("TEXT");

                    b.HasKey("SettingKey");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("SMDataLayer.Models.ShopifyOrder", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrderID");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<string>("Currency")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CustomerID");

                    b.Property<string>("FinancialStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("FulfillmentStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductID");

                    b.Property<long?>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("REAL");

                    b.HasKey("OrderId");

                    b.HasIndex(new[] { "BranchId" }, "IX_ShopifyOrders_BranchID");

                    b.HasIndex(new[] { "CustomerId" }, "IX_ShopifyOrders_CustomerID");

                    b.HasIndex(new[] { "ProductId" }, "IX_ShopifyOrders_ProductID");

                    b.ToTable("ShopifyOrders");
                });

            modelBuilder.Entity("SMDataLayer.Models.Subscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id ");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL")
                        .HasColumnName("Amount ");

                    b.Property<string>("PaidDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("PaidDate ");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("PaymentMethod ");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PaidDate" }, "IX_Subscription_PaidDate ")
                        .IsUnique();

                    b.ToTable("Subscription", (string)null);
                });

            modelBuilder.Entity("SMDataLayer.Models.Supplier", b =>
                {
                    b.Property<long>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<string>("ContactInformation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("SupplierId");

                    b.HasIndex(new[] { "BranchId" }, "IX_Suppliers_BranchID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("SMDataLayer.Models.Transaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Amount")
                        .HasColumnType("REAL");

                    b.Property<long?>("BranchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BranchID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PaymentMethodId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PaymentMethodID");

                    b.Property<string>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionId");

                    b.HasIndex(new[] { "BranchId" }, "IX_Transactions_BranchID");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_Transactions_EmployeeId");

                    b.HasIndex(new[] { "OrderId" }, "IX_Transactions_OrderId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SMDataLayer.Models.Variant", b =>
                {
                    b.Property<long>("VariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasColumnType("TEXT");

                    b.Property<long?>("GrpByVariantId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("InitialPrice")
                        .HasColumnType("REAL");

                    b.Property<long?>("OptionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("option_id");

                    b.Property<long?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("SellingPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("Sku")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("VariantId");

                    b.HasIndex(new[] { "GrpByVariantId" }, "IX_Variants_GrpByVariantId");

                    b.HasIndex(new[] { "ProductId" }, "IX_Variants_ProductId");

                    b.HasIndex(new[] { "OptionId" }, "IX_Variants_option_id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("SMDataLayer.Models.Category", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("Categories")
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("SMDataLayer.Models.Customer", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("Customers")
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("SMDataLayer.Models.DailySale", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("DailySales")
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("SMDataLayer.Models.Inventory", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("Inventories")
                        .HasForeignKey("BranchId");

                    b.HasOne("SMDataLayer.Models.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId");

                    b.HasOne("SMDataLayer.Models.Supplier", "Supplier")
                        .WithMany("Inventories")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Branch");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("SMDataLayer.Models.Notification", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("Notifications")
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("SMDataLayer.Models.OrderItem", b =>
                {
                    b.HasOne("SMDataLayer.Models.Product", "Item")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemId");

                    b.HasOne("SMDataLayer.Models.OrderSummary", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SMDataLayer.Models.OrderSummary", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("OrderSummaries")
                        .HasForeignKey("BranchId");

                    b.HasOne("SMDataLayer.Models.Customer", "Buyer")
                        .WithMany("OrderSummaries")
                        .HasForeignKey("BuyerId");

                    b.HasOne("SMDataLayer.Models.Account", "Seller")
                        .WithMany("OrderSummaries")
                        .HasForeignKey("SellerId");

                    b.Navigation("Branch");

                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SMDataLayer.Models.PaymentMethod", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("SMDataLayer.Models.Product", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("Products")
                        .HasForeignKey("BranchId");

                    b.HasOne("SMDataLayer.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Branch");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SMDataLayer.Models.Promotion", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("Promotions")
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("SMDataLayer.Models.Purchase", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("Purchases")
                        .HasForeignKey("BranchId");

                    b.HasOne("SMDataLayer.Models.Currency", "Currency")
                        .WithMany("Purchases")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SMDataLayer.Models.Product", "Product")
                        .WithMany("Purchases")
                        .HasForeignKey("ProductId");

                    b.HasOne("SMDataLayer.Models.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Branch");

                    b.Navigation("Currency");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("SMDataLayer.Models.Return", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("Returns")
                        .HasForeignKey("BranchId");

                    b.HasOne("SMDataLayer.Models.Customer", "Customer")
                        .WithMany("Returns")
                        .HasForeignKey("CustomerId");

                    b.HasOne("SMDataLayer.Models.Product", "NewProduct")
                        .WithMany("Returns")
                        .HasForeignKey("NewProductId");

                    b.Navigation("Branch");

                    b.Navigation("Customer");

                    b.Navigation("NewProduct");
                });

            modelBuilder.Entity("SMDataLayer.Models.ReviewsRating", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("ReviewsRatings")
                        .HasForeignKey("BranchId");

                    b.HasOne("SMDataLayer.Models.Customer", "Customer")
                        .WithMany("ReviewsRatings")
                        .HasForeignKey("CustomerId");

                    b.HasOne("SMDataLayer.Models.Product", "Product")
                        .WithMany("ReviewsRatings")
                        .HasForeignKey("ProductId");

                    b.Navigation("Branch");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SMDataLayer.Models.Service", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("Services")
                        .HasForeignKey("BranchId");

                    b.HasOne("SMDataLayer.Models.Customer", "Customer")
                        .WithMany("Services")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Branch");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SMDataLayer.Models.ShopifyOrder", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("ShopifyOrders")
                        .HasForeignKey("BranchId");

                    b.HasOne("SMDataLayer.Models.Customer", "Customer")
                        .WithMany("ShopifyOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("SMDataLayer.Models.Product", "Product")
                        .WithMany("ShopifyOrders")
                        .HasForeignKey("ProductId");

                    b.Navigation("Branch");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SMDataLayer.Models.Supplier", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("Suppliers")
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("SMDataLayer.Models.Transaction", b =>
                {
                    b.HasOne("SMDataLayer.Models.Branch", "Branch")
                        .WithMany("Transactions")
                        .HasForeignKey("BranchId");

                    b.HasOne("SMDataLayer.Models.Account", "Employee")
                        .WithMany("Transactions")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SMDataLayer.Models.OrderSummary", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId");

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SMDataLayer.Models.Variant", b =>
                {
                    b.HasOne("SMDataLayer.Models.Variant", "GrpByVariant")
                        .WithMany("InverseGrpByVariant")
                        .HasForeignKey("GrpByVariantId");

                    b.HasOne("SMDataLayer.Models.Option", "Option")
                        .WithMany("Variants")
                        .HasForeignKey("OptionId");

                    b.HasOne("SMDataLayer.Models.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId");

                    b.Navigation("GrpByVariant");

                    b.Navigation("Option");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SMDataLayer.Models.Account", b =>
                {
                    b.Navigation("OrderSummaries");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SMDataLayer.Models.Branch", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Customers");

                    b.Navigation("DailySales");

                    b.Navigation("Inventories");

                    b.Navigation("Notifications");

                    b.Navigation("OrderSummaries");

                    b.Navigation("PaymentMethods");

                    b.Navigation("Products");

                    b.Navigation("Promotions");

                    b.Navigation("Purchases");

                    b.Navigation("Returns");

                    b.Navigation("ReviewsRatings");

                    b.Navigation("Services");

                    b.Navigation("ShopifyOrders");

                    b.Navigation("Suppliers");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SMDataLayer.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SMDataLayer.Models.Currency", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("SMDataLayer.Models.Customer", b =>
                {
                    b.Navigation("OrderSummaries");

                    b.Navigation("Returns");

                    b.Navigation("ReviewsRatings");

                    b.Navigation("Services");

                    b.Navigation("ShopifyOrders");
                });

            modelBuilder.Entity("SMDataLayer.Models.Option", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("SMDataLayer.Models.OrderSummary", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SMDataLayer.Models.Product", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("OrderItems");

                    b.Navigation("Purchases");

                    b.Navigation("Returns");

                    b.Navigation("ReviewsRatings");

                    b.Navigation("ShopifyOrders");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("SMDataLayer.Models.Supplier", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("SMDataLayer.Models.Variant", b =>
                {
                    b.Navigation("InverseGrpByVariant");
                });
#pragma warning restore 612, 618
        }
    }
}
